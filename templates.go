// Code generated by gentmpl.sh; DO NOT EDIT.

package gomarkdoc

var templates = map[string]string{
	"doc": `{{- range (iter .Blocks) -}}
	{{- if eq .Entry.Kind "paragraph" -}}
		{{- paragraph .Entry.Text -}}
	{{- else if eq .Entry.Kind "code" -}}
		{{- codeBlock "" .Entry.Text -}}
	{{- else if eq .Entry.Kind "header" -}}
		{{- header .Entry.Level .Entry.Text -}}
    {{- else if eq .Entry.Kind "list" -}}
        {{- template "list" .Entry.List -}}
	{{- end -}}
	{{- if (not .Last) -}}{{- spacer -}}{{- end -}}
{{- end -}}

`,
	"example": `{{- accordionHeader .Title -}}
{{- spacer -}}

{{- template "doc" .Doc -}}
{{- spacer -}}

{{- codeBlock "go" .Code -}}
{{- spacer -}}

{{- if .HasOutput -}}

	{{- header 4 "Output" -}}
	{{- spacer -}}

	{{- codeBlock "" .Output -}}
	{{- spacer -}}
    
{{- end -}}

{{- accordionTerminator -}}

`,
	"file": `{{if .Header -}}
	{{- .Header -}}
	{{- spacer -}}
{{- end -}}

{{- range .Packages -}}
	{{- template "package" . -}}
	{{- spacer -}}
{{- end -}}

{{- if .Footer -}}
	{{- .Footer -}}
	{{- spacer -}}
{{- end -}}
`,
	"func": `{{- if .Receiver -}}
	{{- codeHref .Location | link (escape .Name) | printf "func \\(%s\\) %s" (escape .Receiver) | rawHeader .Level -}}
{{- else -}}
	{{- codeHref .Location | link (escape .Name) | printf "func %s" | rawHeader .Level -}}
{{- end -}}
{{- spacer -}}

{{- codeBlock "go" .Signature -}}
{{- spacer -}}

{{- template "doc" .Doc -}}

{{- if len .Examples -}}
	{{- spacer -}}

	{{- range (iter .Examples) -}}
		{{- template "example" .Entry -}}
		{{- if (not .Last) -}}{{- spacer -}}{{- end -}}
	{{- end -}}
{{- end -}}

`,
	"import": `{{- codeBlock "go" .Import -}}`,
	"index": `{{- range .Types -}}
    {{- if .IsStructType -}}
        {{- codeHref .Location | link (escape .Name) | printf "type %s" | localHref | link .Title | listEntry 0 -}}
        {{- inlineSpacer -}}
    {{- end -}}
{{- end -}}
`,
	"list": `{{- range (iter .Items) -}}
    {{- if eq .Entry.Kind "ordered" -}}
        {{- .Entry.Number -}}. {{ hangingIndent (include "doc" .Entry) 2 -}}
    {{- else -}}
        - {{ hangingIndent (include "doc" .Entry) 2 -}}
    {{- end -}}

    {{- if (not .Last) -}}
        {{- if $.BlankBetween -}}
            {{- spacer -}}
        {{- else -}}
            {{- inlineSpacer -}}
        {{- end -}}
    {{- end -}}

{{- end -}}`,
	"package": `{{- header .Level .Title -}}
{{- spacer -}}

{{- if len .Doc.Blocks -}}
	{{- template "doc" .Doc -}}
	{{- spacer -}}
{{- end -}}

{{- range (iter .Examples) -}}
	{{- template "example" .Entry -}}
	{{- spacer -}}
{{- end -}}

{{- header (add .Level 1) "Index" -}}
{{- spacer -}}

{{- template "index" . -}}

{{- if len .Types -}}
	{{- spacer -}}

	{{- range (iter .Types) -}}
		{{- template "type" .Entry -}}
		{{- if (not .Last) -}}{{- spacer -}}{{- end -}}
	{{- end -}}
{{- end -}}
`,
	"structfield": `{{- header .Level .Name -}}
{{- spacer -}}

{{- template "doc" .Doc -}}
`,
	"type": `{{- if .IsStructType -}}
    {{- codeHref .Location | link (escape .Name) | printf "type %s" | rawHeader .Level -}}
    {{- spacer -}}

    {{- template "doc" .Doc -}}
    {{- spacer -}}

    {{- codeBlock "go" .Decl -}}

    {{- if .IsStructType -}}
        {{- if len .Fields -}}
            {{- spacer -}}
            {{- range (iter .Fields) -}}
                {{- if len .Entry.Doc.Blocks -}}
                    {{- template "structfield" .Entry -}}
                    {{- if (not .Last) -}}{{- spacer -}}{{- end -}}
                {{- end -}}
            {{- end -}}
        {{- end -}}
    {{- end -}}

    {{- if len .Examples -}}
        {{- spacer -}}

        {{- range (iter .Examples) -}}
            {{- template "example" .Entry -}}
            {{- if (not .Last) -}}{{- spacer -}}{{- end -}}
        {{- end -}}
    {{- end -}}
{{- end -}}

`,
	"value": `{{- template "doc" .Doc -}}
{{- spacer -}}

{{- codeBlock "go" .Decl -}}

`,
}
